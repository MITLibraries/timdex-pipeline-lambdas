SHELL=/bin/bash
DATETIME:=$(shell date -u +%Y%m%dT%H%M%SZ)
# The following four lines are generated by Terraform and are copy/pasted from Terraform output
FUNC:=$(shell aws ssm get-parameter --region us-east-1 --name /tfvars/timdex-infrastructure/timdex-pipeline-lambdas/lambda-function-name --query "Parameter.Value" --output text)
ECR_REPO:=$(shell aws ssm get-parameter --region us-east-1 --name /tfvars/ecr/timdex-pipeline-lambdas/ecr-repository-name --query "Parameter.Value" --output text)
ECR:=$(shell aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com
ECR_PROD:=$(AWS_ACCOUNT_ID_PROD).dkr.ecr.us-east-1.amazonaws.com


help: ## Print this message
	@awk 'BEGIN { FS = ":.*##"; print "Usage:  make <target>\n\nTargets:" } \
/^[-_[:alpha:]]+:.?*##/ { printf "  %-15s%s\n", $$1, $$2 }' $(MAKEFILE_LIST)

### Lint commands ###
lint: bandit black flake8 isort mypy ## Lint the repo

bandit:
	pipenv run bandit -r lambdas

black:
	pipenv run black --check --diff .

flake8:
	pipenv run flake8 .

isort:
	pipenv run isort . --diff

mypy:
	pipenv run mypy lambdas

### Developer Deploy Commands ###
dist-dev: ## Build docker container (intended for developer-based manual build)
	docker build --platform linux/amd64 \
	    -t 222053980223.dkr.ecr.us-east-1.amazonaws.com/$(ECR_REPO):latest \
		-t 222053980223.dkr.ecr.us-east-1.amazonaws.com/$(ECR_REPO):`git describe --always` \
		-t $(ECR_REPO):latest .

publish-dev: dist-dev ## Build, tag and push (intended for developer-based manual publish)
	docker login -u AWS -p $$(aws ecr get-login-password --region us-east-1) 222053980223.dkr.ecr.us-east-1.amazonaws.com
	docker push 222053980223.dkr.ecr.us-east-1.amazonaws.com/$(ECR_REPO):latest
	docker push 222053980223.dkr.ecr.us-east-1.amazonaws.com/$(ECR_REPO):`git describe --always`

update-lambda-dev: ## Updates the lambda with whatever is the most recent image in the ecr (intended for developer-based manual update)
	aws lambda update-function-code \
		--function-name $(FUNC) \
		--image-uri 222053980223.dkr.ecr.us-east-1.amazonaws.com/$(ECR_REPO):latest

### Automated GitHub Action Deploy Commands ###
gha-dist: ## Build docker container (only used by GitHub Actions)
	docker build --platform linux/amd64 \
		-t $(ECR)/$(ECR_REPO):latest \
		-t $(ECR)/$(ECR_REPO):`git describe --always` .	

gha-publish: ## Push the dev image to ECR in Stage-Workloads (only used by GitHub Actions)
	docker login -u AWS -p $$(aws ecr get-login-password --region us-east-1) $(ECR)
	docker push $(ECR)/$(ECR_REPO):latest
	docker push $(ECR)/$(ECR_REPO):`git describe --always`

gha-update-lambda: ## Updates the lambda with whatever is the most recent image in the ecr (only used by GitHub Actions)
	aws lambda update-function-code \
		--function-name $(FUNC) \
		--image-uri $(ECR)/$(ECR_REPO):latest \
		--query "LastUpdateStatusReasonCode" --output text

gha-download-stage: ## Get the stage image from ECR in Stage (only used by GitHub Actions)
	docker login -u AWS -p $$(aws ecr get-login-password --region us-east-1) $(ECR)
	docker pull $(ECR)/$(ECR_REPO):latest
	docker tag $(ECR)/$(ECR_REPO):latest $(ECR_PROD)/$(ECR_REPO):latest
	docker tag $(ECR)/$(ECR_REPO):latest $(ECR_PROD)/$(ECR_REPO):`git describe --always`

gha-deploy-prod: ## Copy the downloaded image from runner to Prod ECR (only used by GitHub Actions)
	docker login -u AWS -p $$(aws ecr get-login-password --region us-east-1) $(ECR_PROD)
	docker push $(ECR_PROD)/$(ECR_REPO):latest
	docker push $(ECR_PROD)/$(ECR_REPO):`git describe --always`
